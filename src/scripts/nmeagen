#!/usr/bin/env python

import math
import optparse
import os
import random
import time
import pty
import serial
import signal
import socket
import termios

import bluetooth
import gobject
import gio
import gtk

from freenav import freedb, projection

RF_COMM_CHANNEL = 1
GPS_SYMLINK_NAME = "/tmp/gps"

FT_TO_METERS = 0.3048
KTS_TO_MPS = 0.5144444444
MPS_TO_KTS = 1/KTS_TO_MPS

ENTRIES = (('ALT', 'Altititude (ft)', '4000'),
           ('ASPD', 'Airspeed (kt)', '0'),
           ('GSPD', 'Ground speed (kt)', '0'),
           ('CRSE', 'Course (deg)', '0'),
           ('MCDY', 'MacCready (kt)', '0.0'),
           ('BLST', 'Ballast', '1.0'),
           ('BUGS', 'Bugs (%)', '0'))

class NmeaGen:
    def __init__(self, qnh, flarm_flag):
        self.qnh = qnh
        self.flarm_flag = flarm_flag
        self.db = freedb.Freedb()
        p = self.db.get_projection()
        self.lambert = projection.Lambert(
            p['parallel1'], p['parallel2'], p['latitude'], p['longitude'])

        wp = self.db.get_waypoint('LAS')
        self.x = wp['x']
        self.y = wp['y']
        self.time = time.time()
        self.altitude = wp['altitude']

        self.flarm_north = 2000
        self.flarm_track = 0

    def set_values(self, altitude, air_speed, ground_speed, course, maccready,
                   ballast, bugs):
        self.altitude = int(altitude)*FT_TO_METERS
        self.ground_speed = int(ground_speed)*KTS_TO_MPS
        self.air_speed = int(air_speed)*KTS_TO_MPS
        self.course = int(course)
        self.maccready = float(maccready)
        self.ballast = float(ballast)
        self.bugs = int(bugs)

    def update(self, stream):
        t = time.time()
        dt = t - self.time
        self.time = t

        self.x += dt*self.ground_speed*math.sin(math.radians(self.course))
        self.y += dt*self.ground_speed*math.cos(math.radians(self.course))

        gmt = time.gmtime(t)
        tstr = time.strftime("%H%M%S.00", gmt)
        datestr = time.strftime('%d%m%y', gmt)

        lat, lon = self.lambert.reverse(self.x, self.y)
        if lat > 0:
            northing = 'N'
        else:
            northing = 'S'
            lat = - lat

        if lon > 0:
            easting = 'E'
        else:
            easting = 'W'
            lon = -lon

        lat = math.degrees(lat)
        lon = math.degrees(lon)
        lat = int(lat*60000)
        lat_deg = lat/60000
        lat_min = (lat % 60000) / 1000.0
        lon = int(lon*60000)
        lon_deg = lon/60000
        lon_min = (lon % 60000) / 1000.0

        data = '$GPRMC,%s,A,%02d%06.3f,%s,%03d%06.3f,%s,%.1f,%d,%s,0.0,E'\
                % (tstr, lat_deg, lat_min, northing, lon_deg, lon_min, easting, 
                   self.ground_speed*MPS_TO_KTS, self.course, datestr)
        data = self.add_checksum(data)
        stream.write(data)
        time.sleep(0.1)

        data = '$GPGGA,%s,%02d%06.3f,%s,%03d%06.3f,%s,1,12,1.0,%d,M,0.0,M,,' % \
                (tstr, lat_deg, lat_min, northing, lon_deg, lon_min, easting,
                 int(self.altitude))
        data = self.add_checksum(data)
        stream.write(data)
        time.sleep(0.1)

        data = '$GPGSA,A,3,1,2,3,4,5,6,7,8,9,10,11,12,1.0,1.0,1.0'
        data = self.add_checksum(data)
        stream.write(data)
        time.sleep(0.1)

        data = '$PBB50,%d,.0,%03.1f,0,%d,%03.1f,1,23' % \
                (int(self.air_speed*MPS_TO_KTS),
                 self.maccready, self.bugs, self.ballast)
        data = self.add_checksum(data)
        stream.write(data)

        level = (self.altitude / FT_TO_METERS) - ((self.qnh - 1013) * 30)
        data = '$PGRMZ,%d,F,2' % level
        data = self.add_checksum(data)
        stream.write(data)

        if self.flarm_flag:
            alarm_level = random.randrange(4)
            bearing = random.randrange(-180, 180)
        else:
            alarm_level = 0
            bearing = 0
        data = '$PFLAU,1,1,2,1,%d,%d,2,0,0' % (alarm_level, bearing)
        data = self.add_checksum(data)
        stream.write(data)

        fmt = "$PFLAA,0,{1:d},{2:d},{3:d},2,{0},{4},,0,{6:.1f},1"
        data = fmt.format(1, 1500, 100, 100, 45, 0, 0.1)
        data = self.add_checksum(data)
        stream.write(data)

        data = fmt.format(2, 500, 1500, 0, '', 0, 0, 0)
        data = self.add_checksum(data)
        stream.write(data)

    def add_checksum(self, data):
        checksum = 0;
        for i in range(len(data) - 1):
            checksum = checksum ^ ord(data[i + 1])

        return (data + '*' + "%02X" + '\r\n') % checksum

class NmeaApp:
    def __init__(self, bt_flag, tcp_port, serial_dev, baud_rate, qnh,
                 flarm_flag):
        self.bt_flag = bt_flag
        self.tcp_port = tcp_port
        self.stream_is_open = False

        self.open_stream(bt_flag, tcp_port, serial_dev, baud_rate)
        self.nmea_gen = NmeaGen(qnh, flarm_flag)

        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_border_width(10)
        self.window.connect('destroy', self.quit_callback)

        table = gtk.Table(len(ENTRIES), 2)
        table.set_row_spacings(5)
        table.set_col_spacings(5)

        self.entry= {}
        for n, e in enumerate(ENTRIES):
            label = gtk.Label(e[1]+':')
            label.set_alignment(1.0, 0.5)
            table.attach(label, 0, 1, n, n+1)

            entry = gtk.Entry()
            entry.set_width_chars(10)
            entry.set_text(e[2])
            table.attach(entry, 1, 2, n, n+1)

            self.entry[e[0]] = entry
        self.entry['ALT'].set_text(str(int(self.nmea_gen.altitude /
                                           FT_TO_METERS)))

        apply_button = gtk.Button(stock=gtk.STOCK_APPLY)
        apply_button.connect('clicked', self.apply_callback)
        quit_button = gtk.Button(stock=gtk.STOCK_QUIT)
        quit_button.connect('clicked', self.quit_callback)

        bbox = gtk.HButtonBox()
        bbox.add(apply_button)
        bbox.add(quit_button)

        vbox = gtk.VBox()
        vbox.set_spacing(10)
        vbox.pack_start(table)
        vbox.pack_end(bbox)

        self.apply_callback(None)
        gobject.timeout_add(1000, self.timeout_callback)

        self.window.add(vbox)
        self.window.show_all()

    def open_stream(self, bt_flag, tcp_port, serial_dev, baud_rate): 
        if bt_flag:
            self.serv_sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
            self.serv_sock.bind(("", bluetooth.PORT_ANY))
            self.serv_sock.listen(1)

            uuid = "09833c09-95e2-4be0-ba00-5df21f493449"
            bluetooth.advertise_service(
               self.serv_sock, "FreenavServer",
               service_id = uuid,
               service_classes = [uuid, bluetooth.SERIAL_PORT_CLASS],
               profiles = [bluetooth.SERIAL_PORT_PROFILE])

            gobject.io_add_watch(self.serv_sock, gobject.IO_IN,
                                 self.socket_listener)
            print "Listening for Bluetooth connection..."
        elif tcp_port > 0:
            self.tcp_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.tcp_sock.connect(("localhost", tcp_port))
            self.stream = gio.unix.OutputStream(self.tcp_sock.fileno(), True)
            self.stream_is_open = True
        elif serial_dev:
            self.ser = serial.Serial(serial_dev, baud_rate)
            self.stream = gio.unix.OutputStream(self.ser.fd, True)
            self.stream_is_open = True
        else:
            master_fd, slave_fd = pty.openpty()
            self.stream = gio.unix.OutputStream(master_fd, True)
            self.stream_is_open = True

            slave_name = os.ttyname(slave_fd)
            try:
                os.unlink(GPS_SYMLINK_NAME)
            except OSError:
                pass
            os.symlink(slave_name, GPS_SYMLINK_NAME)

            (iflag, oflag,
             cflag, lflag, ispeed, ospeed, cc) = termios.tcgetattr(slave_fd)
            iflag = oflag = lflag = 0
            cc[termios.VMIN] = 1
            cflag = termios.CREAD | termios.CLOCAL
            termios.tcsetattr(slave_fd, termios.TCSANOW,
                              [iflag, oflag, cflag, lflag, ispeed, ospeed, cc])

    def socket_listener(self, *args):
        self.client_sock, addr = self.serv_sock.accept()
        print "Accept Bluetooth connection from", addr

        self.stream = gio.unix.OutputStream(self.client_sock.fileno(), True)
        self.stream_is_open = True
        return True

    def timeout_callback(self):
        if self.stream_is_open:
            try:
                self.nmea_gen.update(self.stream)
            except gio.Error, err:
                print err
                #self.stream.close()
                self.stream_is_open = False
        return True

    def apply_callback(self, widget, data=None):
        self.nmea_gen.set_values(self.entry['ALT'].get_text(),
                                 self.entry['ASPD'].get_text(),
                                 self.entry['GSPD'].get_text(),
                                 self.entry['CRSE'].get_text(),
                                 self.entry['MCDY'].get_text(),
                                 self.entry['BLST'].get_text(),
                                 self.entry['BUGS'].get_text())

    def quit_callback(self, widget, data=None):
        gtk.main_quit()

    def main(self):
        gtk.main()

def main():
    parser = optparse.OptionParser()
    parser.add_option("-b", "--bluetooth",
                      dest="bt_flag", action="store_true", default=False,
                      help="Bluetooth server")
    parser.add_option("-f", "--flarm", dest="flarm_flag", action="store_true",
                      default=False, help="Enable FLARM alarms")
    parser.add_option("-q", "--qnh", default=1013, help="QNH pressure")
    parser.add_option("-s", "--serial_dev", default=None, help="Serial device")
    parser.add_option("-r", "--baud_rate", default=4800,
                      help="Serial device baud rate")
    parser.add_option("-t", "--tcp", default=0, help="TCP port number")
    (options, args) = parser.parse_args()

    nmea_app = NmeaApp(options.bt_flag, int(options.tcp), options.serial_dev,
                       int(options.baud_rate), int(options.qnh),
                       options.flarm_flag)
    nmea_app.main()

if __name__ == '__main__':
    main()
