#!/usr/bin/env python
"""Program to display latitude and longitude"""

import ConfigParser
import math
import os

import gtk
import gobject

import freenav
import freenav.freedb
import freenav.freenmea
import freenav.nmeaparser

try:
    import hildon
    import osso
    IS_HILDON_APP = True
    APP_BASE = hildon.Program
except ImportError:
    IS_HILDON_APP = False
    APP_BASE = object

OSSO_APPLICATION = "uk.org.freeflight.freexyz"

LATLON_MARKUP = '<span size="32000" weight="bold">%s</span>'

def dmm(ang, hemis):
    """Splits lat/lon, in radians, into degrees, minutes and decimal minutes"""
    dec_min = int(round(math.degrees(abs(ang)) * 60000))
    min, dec_min = divmod(dec_min, 1000)
    deg, min = divmod(min, 60)

    return (hemis[1] if ang < 0 else hemis[0], deg, min, dec_min)

class App(APP_BASE):
    """Application class"""
    def __init__(self, db, config):
        APP_BASE.__init__(self)

        # Get GPS device
        dev_name = config.get('Device-Names', db.get_settings()['gps_device'])
        dev = config.get(dev_name, 'Device')
        if config.has_option(dev_name, 'Baud'):
            baud_rate = config.getint(dev_name, 'Baud')
        else:
            baud_rate = None

        # Open NMEA device and connect signals
        self.nmea_parser = freenav.nmeaparser.NmeaParser()
        self.nmea_dev = freenav.freenmea.FreeNmea(self.nmea_parser)
        self.nmea_dev.open(dev, baud_rate)
        self.nmea_dev.connect('new-position', self.position_changed)

        # Top level window
        if IS_HILDON_APP:
            self.window = hildon.Window()
            self.osso_c = osso.Context(OSSO_APPLICATION, freenav.__version__,
                                       False)
            self.osso_device = osso.DeviceState(self.osso_c)
            gobject.timeout_add(25000, self.blank_timeout)
        else:
            self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)

        self.window.set_border_width(3)
        self.window.connect('destroy', gtk.main_quit)

        vbox = gtk.VBox(False)
        self.window.add(vbox)

        self.lat_label = gtk.Label('')
        self.lon_label = gtk.Label('')
        vbox.pack_start(self.lat_label, False, False, 30)
        vbox.pack_start(self.lon_label, False, False, 20)

        self.window.show_all()

    def blank_timeout(self):
        """Stop the N810 display from blanking"""
        self.osso_device.display_blanking_pause()
        return True

    def position_changed(self, _source, nmea):
        """ Callback for new GPS position"""
        lat = "%s%02d %02d.%03d" % dmm(nmea.latitude, 'NS')
        lon = "%s%03d %02d.%03d" % dmm(nmea.longitude, 'EW')
        self.lat_label.set_markup(LATLON_MARKUP % lat)
        self.lon_label.set_markup(LATLON_MARKUP % lon)

        self.window.queue_draw()
        return True

    def main(self):
        gtk.main()

def main():
    config = ConfigParser.ConfigParser()
    config.read(os.path.join(os.path.expanduser('~'), '.freeflight',
                             'freenav.ini'))

    db = freenav.freedb.Freedb()

    app = App(db, config)
    app.main()

if __name__ == '__main__':
    main()
