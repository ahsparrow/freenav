# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : flight.sm

import statemap


class FlightState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def arm_restart(self, fsm):
        self.Default(fsm)

    def arm_start(self, fsm):
        self.Default(fsm)

    def cancel_divert(self, fsm):
        self.Default(fsm)

    def decr_turnpoint(self, fsm):
        self.Default(fsm)

    def divert(self, fsm, waypoint_id):
        self.Default(fsm)

    def force_start(self, fsm):
        self.Default(fsm)

    def incr_turnpoint(self, fsm):
        self.Default(fsm)

    def new_position(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write('TRANSITION   : Default\n')
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException, msg

class FlightFSM_Default(FlightState):

    def arm_restart(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Default.arm_restart()\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.do_arm_restart()
        finally:
            fsm.setState(FlightFSM.StartReady)
            fsm.getState().Entry(fsm)

    def force_start(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Default.force_start()\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.do_force_start()
        finally:
            fsm.setState(FlightFSM.StartSector)
            fsm.getState().Entry(fsm)

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Default.Default()\n")


class FlightFSM_Init(FlightFSM_Default):

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Init.new_position()\n")

        if (ctxt.ground_speed > 10) and ctxt.is_previous_start() :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(FlightFSM.Task)
            fsm.getState().Entry(fsm)
        elif ctxt.ground_speed > 10 :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(FlightFSM.Launched)
            fsm.getState().Entry(fsm)
        elif ctxt.ground_speed < 2 :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(FlightFSM.Ground)
            fsm.getState().Entry(fsm)
        else:
            FlightFSM_Default.new_position(self, fsm)
        
class FlightFSM_Ground(FlightFSM_Default):

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Ground.new_position()\n")

        if ctxt.ground_speed > 10 :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(FlightFSM.Launched)
            fsm.getState().Entry(fsm)
        else:
            FlightFSM_Default.new_position(self, fsm)
        
class FlightFSM_Launched(FlightFSM_Default):

    def arm_start(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Launched.arm_start()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(FlightFSM.StartReady)
        fsm.getState().Entry(fsm)

class FlightFSM_StartReady(FlightFSM_Default):

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.StartReady.new_position()\n")

        if ctxt.in_start_sector() :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(FlightFSM.StartSector)
            fsm.getState().Entry(fsm)
        else:
            FlightFSM_Default.new_position(self, fsm)
        
class FlightFSM_StartSector(FlightFSM_Default):

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.StartSector.new_position()\n")

        if not ctxt.in_start_sector() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.do_start()
            finally:
                fsm.setState(FlightFSM.Task)
                fsm.getState().Entry(fsm)
        else:
            FlightFSM_Default.new_position(self, fsm)
        
class FlightFSM_Task(FlightFSM_Default):

    def decr_turnpoint(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Task.decr_turnpoint()\n")

        if len(ctxt.task) > (len(ctxt.tp_list) + 1) :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.do_decr_turnpoint()
            finally:
                fsm.setState(endState)
        else:
            FlightFSM_Default.decr_turnpoint(self, fsm)
        
    def divert(self, fsm, waypoint_id):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Task.divert(waypoint_id)\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.do_divert(waypoint_id)
        finally:
            fsm.setState(FlightFSM.Divert)
            fsm.getState().Entry(fsm)

    def incr_turnpoint(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Task.incr_turnpoint()\n")

        if len(ctxt.tp_list) > 1 :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.do_incr_turnpoint()
            finally:
                fsm.setState(endState)
        else:
            FlightFSM_Default.incr_turnpoint(self, fsm)
        
class FlightFSM_Divert(FlightFSM_Default):

    def Exit(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_cancel_divert()

    def cancel_divert(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Divert.cancel_divert()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(FlightFSM.Task)
        fsm.getState().Entry(fsm)

class FlightFSM(object):

    Init = FlightFSM_Init('FlightFSM.Init', 0)
    Ground = FlightFSM_Ground('FlightFSM.Ground', 1)
    Launched = FlightFSM_Launched('FlightFSM.Launched', 2)
    StartReady = FlightFSM_StartReady('FlightFSM.StartReady', 3)
    StartSector = FlightFSM_StartSector('FlightFSM.StartSector', 4)
    Task = FlightFSM_Task('FlightFSM.Task', 5)
    Divert = FlightFSM_Divert('FlightFSM.Divert', 6)
    Default = FlightFSM_Default('FlightFSM.Default', -1)

class Flight_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, FlightFSM.Init)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
