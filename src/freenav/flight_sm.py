# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : flight.sm

import statemap


class FlightState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def cancel_divert(self, fsm):
        self.Default(fsm)

    def divert(self, fsm, waypoint_id):
        self.Default(fsm)

    def new_position(self, fsm):
        self.Default(fsm)

    def new_pressure_level(self, fsm, level):
        self.Default(fsm)

    def next_turnpoint(self, fsm):
        self.Default(fsm)

    def prev_turnpoint(self, fsm):
        self.Default(fsm)

    def start_trigger(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write('TRANSITION   : Default\n')
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException, msg

class FlightFSM_Default(FlightState):

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Default.Default()\n")


class FlightFSM_Init(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_init()

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Init.new_position()\n")

        if (ctxt.ground_speed > ctxt.TAKEOFF_SPEED) :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(FlightFSM.Air)
            fsm.getState().Entry(fsm)
        elif ctxt.ground_speed < ctxt.STOPPED_SPEED :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(FlightFSM.Ground)
            fsm.getState().Entry(fsm)
        else:
            # No actions.
            pass


class FlightFSM_Ground(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_init_ground()

    def Exit(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_takeoff()

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Ground.new_position()\n")

        if ctxt.ground_speed > ctxt.TAKEOFF_SPEED :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.do_divert_position()
            finally:
                fsm.setState(FlightFSM.Launch)
                fsm.getState().Entry(fsm)
        else:
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.do_ground_position()
            finally:
                fsm.setState(endState)


    def new_pressure_level(self, fsm, level):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Ground.new_pressure_level(level)\n")

        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.do_ground_pressure_level(level)
        finally:
            fsm.setState(endState)

class FlightFSM_Air(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_init_air()

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Air.new_position()\n")

        if not ctxt.is_previous_start() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.do_divert_position()
            finally:
                fsm.setState(FlightFSM.Launch)
                fsm.getState().Entry(fsm)
        elif ctxt.is_previous_start() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.do_divert_position()
            finally:
                fsm.setState(FlightFSM.Resume)
                fsm.getState().Entry(fsm)
        else:
            FlightFSM_Default.new_position(self, fsm)
        
class FlightFSM_Launch(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_launch()

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Launch.new_position()\n")

        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.do_divert_position()
        finally:
            fsm.setState(endState)

    def start_trigger(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Launch.start_trigger()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(FlightFSM.Start)
        fsm.getState().Entry(fsm)

class FlightFSM_Start(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_start()

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Start.new_position()\n")

        if ctxt.in_start_sector() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.do_task_position()
            finally:
                fsm.setState(FlightFSM.Sector)
                fsm.getState().Entry(fsm)
        else:
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.do_task_position()
            finally:
                fsm.setState(endState)


    def start_trigger(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Start.start_trigger()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(FlightFSM.Line)
        fsm.getState().Entry(fsm)

class FlightFSM_Sector(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_start_sector()

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Sector.new_position()\n")

        if not ctxt.in_start_sector() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.do_task_position()
            finally:
                fsm.setState(FlightFSM.Line)
                fsm.getState().Entry(fsm)
        else:
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.do_task_position()
            finally:
                fsm.setState(endState)


    def start_trigger(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Sector.start_trigger()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(FlightFSM.Line)
        fsm.getState().Entry(fsm)

class FlightFSM_Line(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_line()

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Line.new_position()\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.do_task_position()
        finally:
            fsm.setState(FlightFSM.Task)
            fsm.getState().Entry(fsm)

class FlightFSM_Resume(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_resume()

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Resume.new_position()\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.do_task_position()
        finally:
            fsm.setState(FlightFSM.Task)
            fsm.getState().Entry(fsm)

class FlightFSM_Task(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_task()

    def divert(self, fsm, waypoint_id):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Task.divert(waypoint_id)\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.do_set_divert(waypoint_id)
        finally:
            fsm.setState(FlightFSM.Divert)
            fsm.getState().Entry(fsm)

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Task.new_position()\n")

        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.do_task_position()
        finally:
            fsm.setState(endState)

    def next_turnpoint(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Task.next_turnpoint()\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.do_next_turnpoint()
        finally:
            fsm.setState(FlightFSM.Task)
            fsm.getState().Entry(fsm)

    def prev_turnpoint(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Task.prev_turnpoint()\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.do_prev_turnpoint()
        finally:
            fsm.setState(FlightFSM.Task)
            fsm.getState().Entry(fsm)

    def start_trigger(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Task.start_trigger()\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.do_restart()
        finally:
            fsm.setState(FlightFSM.Start)
            fsm.getState().Entry(fsm)

class FlightFSM_Divert(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_divert()

    def cancel_divert(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Divert.cancel_divert()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(FlightFSM.Task)
        fsm.getState().Entry(fsm)

    def divert(self, fsm, waypoint_id):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Divert.divert(waypoint_id)\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.do_set_divert(waypoint_id)
        finally:
            fsm.setState(FlightFSM.Divert)
            fsm.getState().Entry(fsm)

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Divert.new_position()\n")

        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.do_divert_position()
        finally:
            fsm.setState(endState)

class FlightFSM(object):

    Init = FlightFSM_Init('FlightFSM.Init', 0)
    Ground = FlightFSM_Ground('FlightFSM.Ground', 1)
    Air = FlightFSM_Air('FlightFSM.Air', 2)
    Launch = FlightFSM_Launch('FlightFSM.Launch', 3)
    Start = FlightFSM_Start('FlightFSM.Start', 4)
    Sector = FlightFSM_Sector('FlightFSM.Sector', 5)
    Line = FlightFSM_Line('FlightFSM.Line', 6)
    Resume = FlightFSM_Resume('FlightFSM.Resume', 7)
    Task = FlightFSM_Task('FlightFSM.Task', 8)
    Divert = FlightFSM_Divert('FlightFSM.Divert', 9)
    Default = FlightFSM_Default('FlightFSM.Default', -1)

class Flight_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, FlightFSM.Init)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
