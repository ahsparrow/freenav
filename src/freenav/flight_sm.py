# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : flight.sm

import statemap


class FlightState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def cancel_divert(self, fsm):
        self.Default(fsm)

    def decrement_turnpoint(self, fsm):
        self.Default(fsm)

    def divert(self, fsm, waypoint_id):
        self.Default(fsm)

    def increment_turnpoint(self, fsm):
        self.Default(fsm)

    def new_position(self, fsm):
        self.Default(fsm)

    def new_pressure_level(self, fsm, level):
        self.Default(fsm)

    def start_trigger(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write('TRANSITION   : Default\n')
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException, msg

class FlightFSM_Default(FlightState):

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Default.Default()\n")


class FlightFSM_Initialising(FlightFSM_Default):

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Initialising.new_position()\n")

        if (ctxt.ground_speed > 10) and ctxt.is_previous_start() :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(FlightFSM.OnTask)
            fsm.getState().Entry(fsm)
        elif ctxt.ground_speed > 10 :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(FlightFSM.WaitingForStart)
            fsm.getState().Entry(fsm)
        elif ctxt.ground_speed < 2 :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.init_ground()
            finally:
                fsm.setState(FlightFSM.OnGround)
                fsm.getState().Entry(fsm)
        else:
            FlightFSM_Default.new_position(self, fsm)
        
class FlightFSM_OnGround(FlightFSM_Default):

    def Exit(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_takeoff()

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.OnGround.new_position()\n")

        if ctxt.ground_speed > 10 :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(FlightFSM.WaitingForStart)
            fsm.getState().Entry(fsm)
        else:
            FlightFSM_Default.new_position(self, fsm)
        
    def new_pressure_level(self, fsm, level):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.OnGround.new_pressure_level(level)\n")

        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.do_update_pressure_level(level)
        finally:
            fsm.setState(endState)

class FlightFSM_WaitingForStart(FlightFSM_Default):

    def start_trigger(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.WaitingForStart.start_trigger()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(FlightFSM.OutsideStartSector)
        fsm.getState().Entry(fsm)

class FlightFSM_OutsideStartSector(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.set_task("start")

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.OutsideStartSector.new_position()\n")

        if ctxt.in_start_sector() :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(FlightFSM.InsideStartSector)
            fsm.getState().Entry(fsm)
        else:
            FlightFSM_Default.new_position(self, fsm)
        
    def start_trigger(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.OutsideStartSector.start_trigger()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(FlightFSM.InsideStartSector)
        fsm.getState().Entry(fsm)

class FlightFSM_InsideStartSector(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.set_task("sector")

    def new_position(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.InsideStartSector.new_position()\n")

        if not ctxt.in_start_sector() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.make_start()
            finally:
                fsm.setState(FlightFSM.OnTask)
                fsm.getState().Entry(fsm)
        else:
            FlightFSM_Default.new_position(self, fsm)
        
    def start_trigger(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.InsideStartSector.start_trigger()\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.make_start()
        finally:
            fsm.setState(FlightFSM.OnTask)
            fsm.getState().Entry(fsm)

class FlightFSM_OnTask(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.set_task("task")

    def decrement_turnpoint(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.OnTask.decrement_turnpoint()\n")

        if len(ctxt.task) > (len(ctxt.tp_list) + 1) :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.do_decrement_turnpoint()
            finally:
                fsm.setState(endState)
        else:
            FlightFSM_Default.decrement_turnpoint(self, fsm)
        
    def divert(self, fsm, waypoint_id):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.OnTask.divert(waypoint_id)\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.do_divert(waypoint_id)
        finally:
            fsm.setState(FlightFSM.Diverted)
            fsm.getState().Entry(fsm)

    def increment_turnpoint(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.OnTask.increment_turnpoint()\n")

        if len(ctxt.tp_list) > 1 :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.do_increment_turnpoint()
            finally:
                fsm.setState(endState)
        else:
            FlightFSM_Default.increment_turnpoint(self, fsm)
        
    def start_trigger(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.OnTask.start_trigger()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(FlightFSM.OutsideStartSector)
        fsm.getState().Entry(fsm)

class FlightFSM_Diverted(FlightFSM_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.set_task("divert")

    def Exit(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.do_cancel_divert()

    def cancel_divert(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : FlightFSM.Diverted.cancel_divert()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(FlightFSM.OnTask)
        fsm.getState().Entry(fsm)

class FlightFSM(object):

    Initialising = FlightFSM_Initialising('FlightFSM.Initialising', 0)
    OnGround = FlightFSM_OnGround('FlightFSM.OnGround', 1)
    WaitingForStart = FlightFSM_WaitingForStart('FlightFSM.WaitingForStart', 2)
    OutsideStartSector = FlightFSM_OutsideStartSector('FlightFSM.OutsideStartSector', 3)
    InsideStartSector = FlightFSM_InsideStartSector('FlightFSM.InsideStartSector', 4)
    OnTask = FlightFSM_OnTask('FlightFSM.OnTask', 5)
    Diverted = FlightFSM_Diverted('FlightFSM.Diverted', 6)
    Default = FlightFSM_Default('FlightFSM.Default', -1)

class Flight_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, FlightFSM.Initialising)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
